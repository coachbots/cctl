Configuration
=============

**cctl** requires some minor manual configuration to be done before you can
fully use it.

Copying SSH Keys
----------------

If you were to SSH into the Coachbots, you would need to provide either an ssh
key or a password. `Providing passwords is inherently difficult to securely
achieve` and **cctl does not support password-based ssh authentication**.
Consequently, you need to copy your ssh public id to all the coachbots.
**Assuming you have a coachbot key you can use**, this task is as trivial as
running:

.. code-block:: bash

   # You can use the -n flag with ssh-copy-id for a dry run.
   for i in {3..102}; do \
       echo "Installing key to 192.168.1.$i."; \
       sshpass -p YOUR_PASSWORD -v \
           ssh-copy-id -i path/to/id_coachbot.pub "pi@192.168.1.$i"; \
   done

.. warning:: Never run this command without the ``-i`` flag. If you run the
   command without the ``-i`` flag, you will copy over all your ssh keys which
   may potentially be leaking access to the coachbots depending on how
   protected those ssh keys are.

.. note:: You can run ``ssh-copy-id`` with the ``-n`` flag to perform a dry run
   and check if everything behaves as expected before actually adding the key.

.. note:: You may encounter that this snippet will ask you about the known
   hosts for a 100 times or sshpass reporting issues with strict host checking.
   You can skip these checks with ``-o "StrictHostKeyChecking=no"`` given to
   ``ssh-copy-id``. You should, however, ensure that the IP addresses you are
   connecting to are correct. 

When you're done with that, you can simply run:

.. code-block:: bash

   for i in {3..102}; do \
       echo -n "192.168.1.$i: "; \
       ssh pi@192.168.1.$i 'echo "Successfully Connected."'; \
   done

to check if everything went as expected. You should get a printout of all
coachbots reporting a successful connection.

Configuration Files
-------------------

**cctl** exposes some configuration files that you can use to tweak its
behavior. These configuration files are normally located either in
``~/.config/coachswarm/`` or ``/etc/coachswarm/``.

.. note:: **cctl** reads ``~/.config/coachswarm/`` configuration files first
   and falls back to ``/etc/coachswarm/`` files if those do not exist. If
   **cctl** is unable to find either of these files, it will automatically
   generate new files in ``~/.config/coachswarm/{cctl,coachswarm}.conf`` with
   sane defaults.

From now, the term ``$CONFDIR`` refers to the loaded configuration directory as
described. In ``$CONFDIR`` two configuration files are supported.

cctl.conf
---------

The ``$CONFDIR/cctl.conf`` file configures **cctl**â€™s behavior. The following
is an example file with all supported keys.

.. code-block:: ini
   :caption: cctl.conf

   [server]
   # The interface controlling the Coachbots. This is the interface that is
   # connected to the same network as the Coachbots.
   interface = enp60s0
   
   # The fully qualified path to the legacy server directory.
   path = /home/hanlin/coach/server_beta
   
   [coachswarm]
   # The fully qualified path to the coachswarm.conf file. This file is legacy
   # code but is fully necessary in running the coachswarm. The file specified
   # here will be used to control the coachbots.
   conf_path = /home/marko/.config/coachswarm/coachswarm.conf

   # The user running on the Coachbots.
   ssh_user = pi
   # This is the path to the private ssh-key that you just registered with all
   # the coachbots.
   ssh_key = /home/marko/.ssh/id_coachbot
   
   # These two configuration parameters specify the minimum and maximum ID of
   # the coachbots. id_range_min is the smallest ID in the coachswarm while
   # id_range_max is the biggest ID of the coachswarm.
   id_range_min = 0
   id_range_max = 99
   
   [camera]
   # The name of the raw device to be used as the input video stream. You can
   # find this with `cat /sys/class/video4linux/video*/name` of the appropriate
   # video* number.
   raw_dev_name = Piwebcam: UVC Camera
   
   # The name of the output processed video stream. This can be arbitrary, but
   # note that the resulting video stream generated by `cctl cam setup` will be
   # named however you named it here.
   processed_dev_name = Coachcam: Stream_Processed
   
   # Lens correction parameters. These are to be experimentally determined.
   # cx is the x-coordinate focal center offset relative to the frame center.
   # cy is the y-coordinate equivalent.
   k1 = -0.22
   k2 = -0.022
   cx = 0.52
   cy = 0.5

   [logs]
   # The path to the local and remote syslog file.
   syslog_path = /var/log/syslog
   # The legacy log file path. This file is the file that used to be fetched
   # with ./collect_data.py and ./harvest.py
   legacy_log_file_path = /home/pi/control/experiment_log

coachswarm.conf
---------------

The ``$CONFDIR/coachswarm.conf`` file controls some aspects of the coachswarm
configuration. The format of this file is `json`. Currently it only supports
the key `COM_RANGE` which controls the range at which the coachbots can
communicate.

.. code-block:: json
   :caption: coachswarm.conf

   {
      "COM_RANGE": 100.0
   }


When you're done configuring **cctl**, you can visit `Usage <usage.html>`_ for
information on how to effectively use **cctl**.
